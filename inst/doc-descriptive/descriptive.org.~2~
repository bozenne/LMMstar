#+TITLE: Descriptive statistics with LMMstar
#+Author: Brice Ozenne
#+BEGIN_SRC R :exports none :results silent :session *R* :cache no
options(width = 100, digits = 5)
if(system("whoami",intern=TRUE)=="bozenne"){  
  setwd("~/Documents/GitHub/LMMstar/inst/doc-descriptive/")
}else if(system("whoami",intern=TRUE)=="unicph\\hpl802"){  
  setwd("c:/Users/hpl802/Documents/Github/LMMstar/inst/doc-descriptive/")
}
library(ggpubr, quietly = TRUE, verbose = FALSE, warn.conflicts = FALSE)
library(LMMstar, quietly = TRUE, verbose = FALSE, warn.conflicts = FALSE)
#+END_SRC

This vignette describes how to obtain descriptive statistics and
graphical displays:
- =summarize=: mean, standard deviation, number of missing data per timepoint
- =correlate=: correlation or heatmap of the correlation of the endpoint over time
- =summarizeNA=: missing data patterns
- =scatterplot=: bivariate scatterplots for each pair of variable
  along with univariate histogram or boxplot for each variable.

All can be performed separately in each treatment arm, using a wide or
long format. There is no dedicated function to create spaghetti plot -
other packages such as =ggplot2= can be used instead.

\bigskip

The vignette has been run with LMMstar version:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
packageVersion("LMMstar")
#+END_SRC

#+RESULTS:
: [1] '1.2.0'

\clearpage

* Illustrative dataset

A dataset from a two-arm randomized clinical trial will be used for
illustration:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
data(armd.wide, package = "nlmeU")
head(armd.wide)
#+END_SRC

#+RESULTS:
:   subject lesion line0 visual0 visual4 visual12 visual24 visual52 treat.f miss.pat
: 1       1      3    12      59      55       45       NA       NA  Active     --XX
: 2       2      1    13      65      70       65       65       55  Active     ----
: 3       3      4     8      40      40       37       17       NA Placebo     ---X
: 4       4      2    13      67      64       64       64       68 Placebo     ----
: 5       5      1    14      70      NA       NA       NA       NA  Active     XXXX
: 6       6      3    12      59      53       52       53       42  Active     ----

This dataset can be converted from the wide to the long format using
the =reshape= function:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
armd.long <- reshape(armd.wide, direction = "long", idvar = "subject",
                     timevar = "week.num", times = c(0,4,12,24,52),
                     varying = paste0("visual",c(0,4,12,24,52)), 
                     v.names = "visual")
armd.long$week <- as.factor(armd.long$week.num)
armd.long <- armd.long[order(armd.long$subject,armd.long$week),]
rownames(armd.long) <- NULL
head(armd.long)
#+END_SRC

#+RESULTS:
:   subject lesion line0 treat.f miss.pat week.num visual week
: 1       1      3    12  Active     --XX        0     59    0
: 2       1      3    12  Active     --XX        4     55    4
: 3       1      3    12  Active     --XX       12     45   12
: 4       1      3    12  Active     --XX       24     NA   24
: 5       1      3    12  Active     --XX       52     NA   52
: 6       2      1    13  Active     ----        0     65    0

\clearpage

* Summary statistics

Mean, standard deviation, and other summary statistics can be computed
with respect to a categorical variable (typically time) using the
=summarize= function: \newline \Warning If you have loaded dplyr, you
should use =LMMstar:::summarize= to avoid confusion with =dplyr::summarize=
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summarize(visual ~ week + treat.f, data = armd.long, na.rm = TRUE)
#+END_SRC

#+RESULTS:
#+begin_example
   week treat.f observed missing   mean     sd min    q1 median    q3 max
1     0 Placebo      119       0 55.336 15.001  22 45.00   56.0 65.50  85
2     4              117       2 53.966 15.910  12 44.00   54.0 65.00  84
3    12              117       2 52.872 17.201   3 43.00   53.0 65.00  85
4    24              112       7 49.330 18.512   5 37.00   50.5 62.25  85
5    52              105      14 44.438 18.537  11 30.00   44.0 59.00  85
6     0  Active      121       0 54.579 14.823  20 45.00   57.0 66.00  82
7     4              114       7 50.912 15.811  12 39.25   52.0 63.00  84
8    12              110      11 48.673 17.477  12 35.25   49.5 63.00  82
9    24              102      19 45.461 18.080   5 32.00   45.0 60.75  84
10   52               90      31 39.100 18.401   4 25.00   37.0 54.50  84
#+end_example

\noindent The =summarize= function can simultaneously produce the summary
statistics for several outcome variables:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summarize(visual0 + visual52 ~ treat.f, data = armd.wide, na.rm = TRUE)
#+END_SRC

#+RESULTS:
:    outcome treat.f observed missing   mean     sd min q1 median   q3 max
: 1  visual0 Placebo      119       0 55.336 15.001  22 45     56 65.5  85
: 2           Active      121       0 54.579 14.823  20 45     57 66.0  82
: 3 visual52 Placebo      105      14 44.438 18.537  11 30     44 59.0  85
: 4           Active       90      31 39.100 18.401   4 25     37 54.5  84

\noindent User-defined summary statistics can be passed via the =FCT= argument, e.g.:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
myAUC <- function(week.num, visual){
  approxAUC(x = week.num, y = visual, from = 0, to = 52)
}

armd.auc <- summarize(visual ~ subject, data = armd.long[armd.long$miss.pat=="----",],
                      FUN = myAUC, na.rm = TRUE)
## here subset to subject without missing value.
## not clear how to compute the AUC when the last measurement is missing
head(armd.auc)
#+END_SRC

#+RESULTS:
:   outcome subject observed missing pc.missing mean     sd min q1 median q3 max  AUC
: 1  visual       2        5       0          0 64.0 5.4772  55 65     65 65  70 3270
: 2  visual       4        5       0          0 65.4 1.9494  64 64     64 67  68 3390
: 3  visual       6        5       0          0 51.8 6.1400  42 52     53 53  59 2604
: 4  visual       7        5       0          0 68.6 4.3359  64 65     68 72  74 3626
: 5  visual       8        5       0          0 38.6 2.6077  37 37     37 39  43 1988
: 6  visual       9        5       0          0 55.6 4.1593  49 54     58 58  59 2848

\noindent \Warning In some datasets, lines with missing outcome values (here ="visual"=)
have been removed:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
armd.longNNA <- armd.long[!is.na(armd.long$visual),]
head(armd.longNNA)
#+END_SRC

#+RESULTS:
:   subject lesion line0 treat.f miss.pat week.num visual week
: 1       1      3    12  Active     --XX        0     59    0
: 2       1      3    12  Active     --XX        4     55    4
: 3       1      3    12  Active     --XX       12     45   12
: 6       2      1    13  Active     ----        0     65    0
: 7       2      1    13  Active     ----        4     70    4
: 8       2      1    13  Active     ----       12     65   12

A naive application of the summarize function will not count correctly
the number of missing values:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
summarize(visual ~ week + treat.f, data = armd.longNNA, na.rm = TRUE)$missing
#+END_SRC

#+RESULTS:
:  [1] 0 0 0 0 0 0 0 0 0 0

\noindent To fix that one should use the long format and inform about
the data structure: cluster (=subject=) and ordering variable
(=week=): \newline \Warning there should be no duplicated value of the
ordering variable within cluster
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
sss <- summarize(visual ~ week + treat.f, data = armd.longNNA, na.rm = TRUE,
                 repetition = ~week|subject)
sss
#+END_SRC

#+RESULTS:
#+begin_example
   week treat.f observed missing   mean     sd min    q1 median    q3 max
1     0 Placebo      119       0 55.336 15.001  22 45.00   56.0 65.50  85
2     4              117       2 53.966 15.910  12 44.00   54.0 65.00  84
3    12              117       2 52.872 17.201   3 43.00   53.0 65.00  85
4    24              112       7 49.330 18.512   5 37.00   50.5 62.25  85
5    52              105      14 44.438 18.537  11 30.00   44.0 59.00  85
6     0  Active      121       0 54.579 14.823  20 45.00   57.0 66.00  82
7     4              114       7 50.912 15.811  12 39.25   52.0 63.00  84
8    12              110      11 48.673 17.477  12 35.25   49.5 63.00  82
9    24              102      19 45.461 18.080   5 32.00   45.0 60.75  84
10   52               90      31 39.100 18.401   4 25.00   37.0 54.50  84
#+end_example

This also enables to obtain graphical display where summary statistics
about an outcome variable (here =visual=) are displayed across values
of the ordering variable (here =week=):
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(sss, type = "mean") ## left panel
plot(sss, type = "sd") ## middle panel
plot(sss, type = "pc.missing") ## right panel
#+END_SRC

#+RESULTS:

See =help(plot.summarize)= for options to customize the graphical
display.

#+ATTR_LaTeX: :width 1\textwidth :options trim={0 0 0 0} :placement [!h]
[[./figures/summarize.pdf]]

#+BEGIN_SRC R :exports none :results output :session *R* :cache no
pdf("./figures/summarize.pdf", width = 12)
ggarrange(autoplot(sss,type="mean")$plot + ggtitle("Mean"),
          autoplot(sss,type="sd")$plot + ggtitle("Standard deviation"),
          autoplot(sss,type="pc.missing")$plot + ggtitle("Missing (%)"),
          nrow = 1, common.legend = TRUE, legend = "bottom")
dev.off()
#+END_SRC

#+RESULTS:
: windows 
:       2

\clearpage 

* Correlation


The =correlate= function facilitate the estimation of the correlation:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
rrr <- correlate(visual ~ treat.f, repetition = ~week | subject,
                 data = armd.long, use = "pairwise")
rrr
#+END_SRC

#+RESULTS:
#+begin_example
Pearson correlation: 
$`treat.f=Placebo`
            0       4      12      24      52
   0  1.00000 0.87747 0.74268 0.67894 0.54149
   4  0.87747 1.00000 0.83266 0.72438 0.59785
   12 0.74268 0.83266 1.00000 0.77297 0.67759
   24 0.67894 0.72438 0.77297 1.00000 0.83893
   52 0.54149 0.59785 0.67759 0.83893 1.00000

$`treat.f=Active`
            0       4      12      24      52
   0  1.00000 0.83313 0.75273 0.64463 0.58424
   4  0.83313 1.00000 0.85007 0.74900 0.62285
   12 0.75273 0.85007 1.00000 0.87112 0.72536
   24 0.64463 0.74900 0.87112 1.00000 0.82800
   52 0.58424 0.62285 0.72536 0.82800 1.00000
#+end_example

By default Pearson's correlation is computed (argument =method=). A
graphical representation can be obtained using:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(rrr)
#+END_SRC

#+RESULTS:

#+ATTR_LaTeX: :width 1\textwidth :options trim={0 0 0 0} :placement [!h]
[[./figures/correlation.pdf]]


#+BEGIN_SRC R :exports none :results output :session *R* :cache no
ggsave(autoplot(rrr)$plot, filename = "./figures/correlation.pdf", width = 12, height = 6)
#+END_SRC
#+RESULTS:


\clearpage


* Missing data patterns

The =summarizeNA= function identifies the possible combinations of
observed/missing data:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
mp <- summarizeNA(armd.long, repetition = ~week | subject)
mp
#+END_SRC

#+RESULTS:
#+begin_example
variable frequency missing.pattern n.missing 0 4 12 24 52
   lesion       239           00000         0 0 0  0  0  0
                  1           11111         5 1 1  1  1  1
    line0       240           00000         0 0 0  0  0  0
  treat.f       240           00000         0 0 0  0  0  0
 miss.pat       240           00000         0 0 0  0  0  0
 week.num       240           00000         0 0 0  0  0  0
   visual       188           00000         0 0 0  0  0  0
                 24           00001         1 0 0  0  0  1
                  4           00010         1 0 0  0  1  0
                  8           00011         2 0 0  0  1  1
                  1           00110         2 0 0  1  1  0
                  6           00111         3 0 0  1  1  1
                  2           01000         1 0 1  0  0  0
                  1           01011         3 0 1  0  1  1
                  6           01111         4 0 1  1  1  1
#+end_example

A graphical representation can be obtained using =plot=. Since there
are several variables, one has to specifying the variable relative to
which the missing data pattern should be displayed:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(mp, variable = "visual")
#+END_SRC

#+RESULTS:

See =help(plot.summarizeNA)= for options to customize the graphical
display.

#+RESULTS:

#+ATTR_LaTeX: :width 1\textwidth :options trim={0 0 0 0} :placement [!h]
[[./figures/summarizeNA.pdf]]



#+BEGIN_SRC R :exports none :results output :session *R* :cache no
ggsave(autoplot(mp, variable = "visual")$plot, filename = "./figures/summarizeNA.pdf", height = 6, width = 12)
#+END_SRC
#+RESULTS:

\clearpage

A formula should be specified to stratify the missing data pattern per group:
#+BEGIN_SRC R :exports both :results output :session *R* :cache no
mpS <- summarizeNA(visual ~ treat.f, repetition = ~week | subject, data = armd.long)
mpS
#+END_SRC

#+RESULTS:
#+begin_example
variable treat.f frequency missing.pattern n.missing 0 4 12 24 52
   visual Placebo       102           00000         0 0 0  0  0  0
          Placebo         9           00001         1 0 0  0  0  1
          Placebo         2           00010         1 0 0  0  1  0
          Placebo         3           00011         2 0 0  0  1  1
          Placebo         1           00111         3 0 0  1  1  1
          Placebo         1           01000         1 0 1  0  0  0
          Placebo         1           01111         4 0 1  1  1  1
           Active        86           00000         0 0 0  0  0  0
           Active        15           00001         1 0 0  0  0  1
           Active         2           00010         1 0 0  0  1  0
           Active         5           00011         2 0 0  0  1  1
           Active         1           00110         2 0 0  1  1  0
           Active         5           00111         3 0 0  1  1  1
           Active         1           01000         1 0 1  0  0  0
           Active         1           01011         3 0 1  0  1  1
           Active         5           01111         4 0 1  1  1  1
#+end_example

#+BEGIN_SRC R :exports both :results output :session *R* :cache no
plot(mpS)
#+END_SRC

#+RESULTS:

#+ATTR_LaTeX: :width 1\textwidth :options trim={0 0 0 0} :placement [!h]
[[./figures/summarizeNA-stratified.pdf]]



#+BEGIN_SRC R :exports none :results output :session *R* :cache no
ggsave(autoplot(mpS)$plot, filename = "./figures/summarizeNA-stratified.pdf", height = 6, width = 12)
#+END_SRC
#+RESULTS:

\clearpage

* Spaghetti plot

There is (currently) not dedicated function to obtain spaghetti
plots. Instead one can use the ggplot2 package with the long format, e.g.:
#+BEGIN_SRC R :exports code :results output :session *R* :cache no
gg.spa <- ggplot(armd.long, aes(x = week, y = visual, group = subject, color = treat.f))
gg.spa <- gg.spa + geom_point() + geom_line()
gg.spa
#+END_SRC

#+RESULTS:
: Advarselsbeskeder:
: 1: [1m[22mRemoved 93 rows containing missing values or values outside the scale range (`geom_point()`). 
: 2: [1m[22mRemoved 84 rows containing missing values or values outside the scale range (`geom_line()`).

#+ATTR_LaTeX: :width 1\textwidth :options trim={0 0 0 0} :placement [!h]
[[./figures/spaghetti.pdf]]


#+BEGIN_SRC R :exports none :results output :session *R* :cache no
pdf("./figures/spaghetti.pdf", width = 6.5, height = 5)
gg.spa
dev.off()
#+END_SRC

#+RESULTS:
: Advarselsbeskeder:
: 1: [1m[22mRemoved 93 rows containing missing values or values outside the scale range (`geom_point()`). 
: 2: [1m[22mRemoved 84 rows containing missing values or values outside the scale range (`geom_line()`).
: windows 
:       2


\clearpage


\clearpage

* CONFIG                                                           :noexport:
#+LANGUAGE:  en
#+LaTeX_CLASS: org-article
#+LaTeX_CLASS_OPTIONS: [12pt]
#+OPTIONS:   title:t author:t toc:nil todo:nil
#+OPTIONS:   H:3 num:t 
#+OPTIONS:   TeX:t LaTeX:t
** Display of the document
# ## space between lines
#+LATEX_HEADER: \RequirePackage{setspace} % to modify the space between lines - incompatible with footnote in beamer
#+LaTeX_HEADER:\renewcommand{\baselinestretch}{1.1}
# ## margins
#+LaTeX_HEADER: \geometry{a4paper, left=10mm, right=10mm, top=10mm}
# ## personalize the prefix in the name of the sections
#+LaTeX_HEADER: \usepackage{titlesec}
# ## fix bug in titlesec version
# ##  https://tex.stackexchange.com/questions/299969/titlesec-loss-of-section-numbering-with-the-new-update-2016-03-15
#+LaTeX_HEADER: \usepackage{etoolbox}
#+LaTeX_HEADER: 
#+LaTeX_HEADER: \makeatletter
#+LaTeX_HEADER: \patchcmd{\ttlh@hang}{\parindent\z@}{\parindent\z@\leavevmode}{}{}
#+LaTeX_HEADER: \patchcmd{\ttlh@hang}{\noindent}{}{}{}
#+LaTeX_HEADER: \makeatother
** Color
# ## define new colors
#+LATEX_HEADER: \RequirePackage{colortbl} % arrayrulecolor to mix colors
#+LaTeX_HEADER: \definecolor{myorange}{rgb}{1,0.2,0}
#+LaTeX_HEADER: \definecolor{mypurple}{rgb}{0.7,0,8}
#+LaTeX_HEADER: \definecolor{mycyan}{rgb}{0,0.6,0.6}
#+LaTeX_HEADER: \newcommand{\lightblue}{blue!50!white}
#+LaTeX_HEADER: \newcommand{\darkblue}{blue!80!black}
#+LaTeX_HEADER: \newcommand{\darkgreen}{green!50!black}
#+LaTeX_HEADER: \newcommand{\darkred}{red!50!black}
#+LaTeX_HEADER: \definecolor{gray}{gray}{0.5}
# ## change the color of the links
#+LaTeX_HEADER: \hypersetup{
#+LaTeX_HEADER:  citecolor=[rgb]{0,0.5,0},
#+LaTeX_HEADER:  urlcolor=[rgb]{0,0,0.5},
#+LaTeX_HEADER:  linkcolor=[rgb]{0,0,0.5},
#+LaTeX_HEADER: }
** Font
# https://tex.stackexchange.com/questions/25249/how-do-i-use-a-particular-font-for-a-small-section-of-text-in-my-document
#+LaTeX_HEADER: \newenvironment{note}{\small \color{gray}\fontfamily{lmtt}\selectfont}{\par}
#+LaTeX_HEADER: \newenvironment{activity}{\color{orange}\fontfamily{qzc}\selectfont}{\par}
** Symbols
# ## valid and cross symbols
#+LaTeX_HEADER: \RequirePackage{pifont}
#+LaTeX_HEADER: \RequirePackage{relsize}
#+LaTeX_HEADER: \newcommand{\Cross}{{\raisebox{-0.5ex}%
#+LaTeX_HEADER:		{\relsize{1.5}\ding{56}}}\hspace{1pt} }
#+LaTeX_HEADER: \newcommand{\Valid}{{\raisebox{-0.5ex}%
#+LaTeX_HEADER:		{\relsize{1.5}\ding{52}}}\hspace{1pt} }
#+LaTeX_HEADER: \newcommand{\CrossR}{ \textcolor{red}{\Cross} }
#+LaTeX_HEADER: \newcommand{\ValidV}{ \textcolor{green}{\Valid} }
# ## warning symbol
#+LaTeX_HEADER: \usepackage{stackengine}
#+LaTeX_HEADER: \usepackage{scalerel}
#+LaTeX_HEADER: \newcommand\Warning[1][3ex]{%
#+LaTeX_HEADER:   \renewcommand\stacktype{L}%
#+LaTeX_HEADER:   \scaleto{\stackon[1.3pt]{\color{red}$\triangle$}{\tiny\bfseries !}}{#1}%
#+LaTeX_HEADER:   \xspace
#+LaTeX_HEADER: }

** Code
:PROPERTIES:
:ID: 2ec77c4b-f83d-4612-9a89-a96ba1b7bf70
:END:
# Documentation at https://org-babel.readthedocs.io/en/latest/header-args/#results
# :tangle (yes/no/filename) extract source code with org-babel-tangle-file, see http://orgmode.org/manual/Extracting-source-code.html 
# :cache (yes/no)
# :eval (yes/no/never)
# :results (value/output/silent/graphics/raw/latex)
# :export (code/results/none/both)
#+PROPERTY: header-args :session *R* :tangle yes :cache no ## extra argument need to be on the same line as :session *R*
# Code display:
#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small,formatcom = {\color[rgb]{0.5,0,0}}}
# ## change font size input (global change)
# ## doc: https://ctan.math.illinois.edu/macros/latex/contrib/listings/listings.pdf
# #+LATEX_HEADER: \newskip kipamount    kipamount =6pt plus 0pt minus 6pt
# #+LATEX_HEADER: \lstdefinestyle{code-tiny}{basicstyle=\ttfamily\tiny, aboveskip =  kipamount, belowskip =  kipamount}
# #+LATEX_HEADER: \lstset{style=code-tiny}
# ## change font size input (local change, put just before BEGIN_SRC)
# ## #+ATTR_LATEX: :options basicstyle=\ttfamily\scriptsize
# ## change font size output (global change)
# ## \RecustomVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\tiny,formatcom = {\color[rgb]{0.5,0,0}}}
** Rlogo
#+LATEX_HEADER:\definecolor{grayR}{HTML}{8A8990}
#+LATEX_HEADER:\definecolor{grayL}{HTML}{C4C7C9}
#+LATEX_HEADER:\definecolor{blueM}{HTML}{1F63B5}   
#+LATEX_HEADER: \newcommand{\Rlogo}[1][0.07]{
#+LATEX_HEADER: \begin{tikzpicture}[scale=#1]
#+LATEX_HEADER: \shade [right color=grayR,left color=grayL,shading angle=60] 
#+LATEX_HEADER: (-3.55,0.3) .. controls (-3.55,1.75) 
#+LATEX_HEADER: and (-1.9,2.7) .. (0,2.7) .. controls (2.05,2.7)  
#+LATEX_HEADER: and (3.5,1.6) .. (3.5,0.3) .. controls (3.5,-1.2) 
#+LATEX_HEADER: and (1.55,-2) .. (0,-2) .. controls (-2.3,-2) 
#+LATEX_HEADER: and (-3.55,-0.75) .. cycle;
#+LATEX_HEADER: 
#+LATEX_HEADER: \fill[white] 
#+LATEX_HEADER: (-2.15,0.2) .. controls (-2.15,1.2) 
#+LATEX_HEADER: and (-0.7,1.8) .. (0.5,1.8) .. controls (2.2,1.8) 
#+LATEX_HEADER: and (3.1,1.2) .. (3.1,0.2) .. controls (3.1,-0.75) 
#+LATEX_HEADER: and (2.4,-1.45) .. (0.5,-1.45) .. controls (-1.1,-1.45) 
#+LATEX_HEADER: and (-2.15,-0.7) .. cycle;
#+LATEX_HEADER: 
#+LATEX_HEADER: \fill[blueM] 
#+LATEX_HEADER: (1.75,1.25) -- (-0.65,1.25) -- (-0.65,-2.75) -- (0.55,-2.75) -- (0.55,-1.15) -- 
#+LATEX_HEADER: (0.95,-1.15)  .. controls (1.15,-1.15) 
#+LATEX_HEADER: and (1.5,-1.9) .. (1.9,-2.75) -- (3.25,-2.75)  .. controls (2.2,-1) 
#+LATEX_HEADER: and (2.5,-1.2) .. (1.8,-0.95) .. controls (2.6,-0.9) 
#+LATEX_HEADER: and (2.85,-0.35) .. (2.85,0.2) .. controls (2.85,0.7) 
#+LATEX_HEADER: and (2.5,1.2) .. cycle;
#+LATEX_HEADER: 
#+LATEX_HEADER: \fill[white]  (1.4,0.4) -- (0.55,0.4) -- (0.55,-0.3) -- (1.4,-0.3).. controls (1.75,-0.3) 
#+LATEX_HEADER: and (1.75,0.4) .. cycle;
#+LATEX_HEADER: 
#+LATEX_HEADER: \end{tikzpicture}
#+LATEX_HEADER: }
** Image and graphs
#+LATEX_HEADER: \RequirePackage{epstopdf} % to be able to convert .eps to .pdf image files
#+LATEX_HEADER: \RequirePackage{capt-of} % 
#+LATEX_HEADER: \RequirePackage{caption} % newlines in graphics
#+LaTeX_HEADER: \RequirePackage{tikz-cd} % graph
# ## https://tools.ietf.org/doc/texlive-doc/latex/tikz-cd/tikz-cd-doc.pdf
** Table
#+LATEX_HEADER: \RequirePackage{booktabs} % for nice lines in table (e.g. toprule, bottomrule, midrule, cmidrule)
** Inline latex
# @@latex:any arbitrary LaTeX code@@
** Algorithm
#+LATEX_HEADER: \RequirePackage{amsmath}
#+LATEX_HEADER: \RequirePackage{algorithm}
#+LATEX_HEADER: \RequirePackage[noend]{algpseudocode}
** Math
#+LATEX_HEADER: \RequirePackage{dsfont}
#+LATEX_HEADER: \RequirePackage{amsmath,stmaryrd,graphicx}
#+LATEX_HEADER: \RequirePackage{prodint} % product integral symbol (\PRODI)
# ## lemma
# #+LaTeX_HEADER: \RequirePackage{amsthm}
# #+LaTeX_HEADER: \newtheorem{theorem}{Theorem}
# #+LaTeX_HEADER: \newtheorem{lemma}[theorem]{Lemma}
*** Template for shortcut
#+LATEX_HEADER: \usepackage{ifthen}
#+LATEX_HEADER: \usepackage{xifthen}
#+LATEX_HEADER: \usepackage{xargs}
#+LATEX_HEADER: \usepackage{xspace}
#+LATEX_HEADER: \newcommand\defOperator[7]{%
#+LATEX_HEADER:	\ifthenelse{\isempty{#2}}{
#+LATEX_HEADER:		\ifthenelse{\isempty{#1}}{#7{#3}#4}{#7{#3}#4 \left#5 #1 \right#6}
#+LATEX_HEADER:	}{
#+LATEX_HEADER:	\ifthenelse{\isempty{#1}}{#7{#3}#4_{#2}}{#7{#3}#4_{#1}\left#5 #2 \right#6}
#+LATEX_HEADER: }
#+LATEX_HEADER: }
#+LATEX_HEADER: \newcommand\defUOperator[5]{%
#+LATEX_HEADER: \ifthenelse{\isempty{#1}}{
#+LATEX_HEADER:		#5\left#3 #2 \right#4
#+LATEX_HEADER: }{
#+LATEX_HEADER:	\ifthenelse{\isempty{#2}}{\underset{#1}{\operatornamewithlimits{#5}}}{
#+LATEX_HEADER:		\underset{#1}{\operatornamewithlimits{#5}}\left#3 #2 \right#4}
#+LATEX_HEADER: }
#+LATEX_HEADER: }
#+LATEX_HEADER: \newcommand{\defBoldVar}[2]{	
#+LATEX_HEADER:	\ifthenelse{\equal{#2}{T}}{\boldsymbol{#1}}{\mathbf{#1}}
#+LATEX_HEADER: }
**** Probability
#+LATEX_HEADER: \newcommandx\Esp[2][1=,2=]{\defOperator{#1}{#2}{E}{}{\lbrack}{\rbrack}{\mathbb}}
#+LATEX_HEADER: \newcommandx\Prob[2][1=,2=]{\defOperator{#1}{#2}{P}{}{\lbrack}{\rbrack}{\mathbb}}
#+LATEX_HEADER: \newcommandx\Qrob[2][1=,2=]{\defOperator{#1}{#2}{Q}{}{\lbrack}{\rbrack}{\mathbb}}
#+LATEX_HEADER: \newcommandx\Var[2][1=,2=]{\defOperator{#1}{#2}{V}{ar}{\lbrack}{\rbrack}{\mathbb}}
#+LATEX_HEADER: \newcommandx\Cov[2][1=,2=]{\defOperator{#1}{#2}{C}{ov}{\lbrack}{\rbrack}{\mathbb}}
#+LATEX_HEADER: \newcommandx\Binom[2][1=,2=]{\defOperator{#1}{#2}{B}{}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\Gaus[2][1=,2=]{\defOperator{#1}{#2}{N}{}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\Wishart[2][1=,2=]{\defOperator{#1}{#2}{W}{ishart}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\Likelihood[2][1=,2=]{\defOperator{#1}{#2}{L}{}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\logLikelihood[2][1=,2=]{\defOperator{#1}{#2}{\ell}{}{(}{)}{}}
#+LATEX_HEADER: \newcommandx\Information[2][1=,2=]{\defOperator{#1}{#2}{I}{}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\Hessian[2][1=,2=]{\defOperator{#1}{#2}{H}{}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\Score[2][1=,2=]{\defOperator{#1}{#2}{S}{}{(}{)}{\mathcal}}
**** Operators
#+LATEX_HEADER: \newcommandx\Vois[2][1=,2=]{\defOperator{#1}{#2}{V}{}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\IF[2][1=,2=]{\defOperator{#1}{#2}{IF}{}{(}{)}{\mathcal}}
#+LATEX_HEADER: \newcommandx\Ind[1][1=]{\defOperator{}{#1}{1}{}{(}{)}{\mathds}}
#+LATEX_HEADER: \newcommandx\Max[2][1=,2=]{\defUOperator{#1}{#2}{(}{)}{min}}
#+LATEX_HEADER: \newcommandx\Min[2][1=,2=]{\defUOperator{#1}{#2}{(}{)}{max}}
#+LATEX_HEADER: \newcommandx\argMax[2][1=,2=]{\defUOperator{#1}{#2}{(}{)}{argmax}}
#+LATEX_HEADER: \newcommandx\argMin[2][1=,2=]{\defUOperator{#1}{#2}{(}{)}{argmin}}
#+LATEX_HEADER: \newcommandx\cvD[2][1=D,2=n \rightarrow \infty]{\xrightarrow[#2]{#1}}
#+LATEX_HEADER: \newcommandx\Hypothesis[2][1=,2=]{
#+LATEX_HEADER:         \ifthenelse{\isempty{#1}}{
#+LATEX_HEADER:         \mathcal{H}
#+LATEX_HEADER:         }{
#+LATEX_HEADER: 	\ifthenelse{\isempty{#2}}{
#+LATEX_HEADER: 		\mathcal{H}_{#1}
#+LATEX_HEADER: 	}{
#+LATEX_HEADER: 	\mathcal{H}^{(#2)}_{#1}
#+LATEX_HEADER:         }
#+LATEX_HEADER:         }
#+LATEX_HEADER: }
#+LATEX_HEADER: \newcommandx\dpartial[4][1=,2=,3=,4=\partial]{
#+LATEX_HEADER: 	\ifthenelse{\isempty{#3}}{
#+LATEX_HEADER: 		\frac{#4 #1}{#4 #2}
#+LATEX_HEADER: 	}{
#+LATEX_HEADER: 	\left.\frac{#4 #1}{#4 #2}\right\rvert_{#3}
#+LATEX_HEADER: }
#+LATEX_HEADER: }
#+LATEX_HEADER: \newcommandx\dTpartial[3][1=,2=,3=]{\dpartial[#1][#2][#3][d]}
#+LATEX_HEADER: \newcommandx\ddpartial[3][1=,2=,3=]{
#+LATEX_HEADER: 	\ifthenelse{\isempty{#3}}{
#+LATEX_HEADER: 		\frac{\partial^{2} #1}{\partial #2^2}
#+LATEX_HEADER: 	}{
#+LATEX_HEADER: 	\frac{\partial^2 #1}{\partial #2\partial #3}
#+LATEX_HEADER: }
#+LATEX_HEADER: } 
**** General math
#+LATEX_HEADER: \newcommand\Real{\mathbb{R}}
#+LATEX_HEADER: \newcommand\Rational{\mathbb{Q}}
#+LATEX_HEADER: \newcommand\Natural{\mathbb{N}}
#+LATEX_HEADER: \newcommand\trans[1]{{#1}^\intercal}%\newcommand\trans[1]{{\vphantom{#1}}^\top{#1}}
#+LATEX_HEADER: \newcommand{\independent}{\mathrel{\text{\scalebox{1.5}{$\perp\mkern-10mu\perp$}}}}
#+LaTeX_HEADER: \newcommand\half{\frac{1}{2}}
#+LaTeX_HEADER: \newcommand\normMax[1]{\left|\left|#1\right|\right|_{max}}
#+LaTeX_HEADER: \newcommand\normTwo[1]{\left|\left|#1\right|\right|_{2}}
#+LATEX_HEADER: \newcommand\Veta{\boldsymbol{\eta}}

** Notations

#+LaTeX_HEADER:\newcommand{\Model}{\mathcal{M}}
#+LaTeX_HEADER:\newcommand{\ModelHat}{\widehat{\mathcal{M}}}

#+LaTeX_HEADER:\newcommand{\param}{\Theta}
#+LaTeX_HEADER:\newcommand{\paramHat}{\widehat{\param}}
#+LaTeX_HEADER:\newcommand{\paramCon}{\widetilde{\param}}

#+LaTeX_HEADER:\newcommand{\Vparam}{\boldsymbol{\param}}
#+LaTeX_HEADER:\newcommand{\VparamT}{\Vparam_0}
#+LaTeX_HEADER:\newcommand{\VparamHat}{\boldsymbol{\paramHat}}
#+LaTeX_HEADER:\newcommand{\VparamCon}{\boldsymbol{\paramCon}}

#+LaTeX_HEADER:\newcommand{\X}{X}
#+LaTeX_HEADER:\newcommand{\x}{x}
#+LaTeX_HEADER:\newcommand{\VX}{\boldsymbol{X}}
#+LaTeX_HEADER:\newcommand{\Vx}{\boldsymbol{x}}

#+LaTeX_HEADER:\newcommand{\Y}{Y}
#+LaTeX_HEADER:\newcommand{\y}{y}
#+LaTeX_HEADER:\newcommand{\VY}{\boldsymbol{Y}}
#+LaTeX_HEADER:\newcommand{\Vy}{\boldsymbol{y}}
#+LaTeX_HEADER:\newcommand{\Vvarepsilon}{\boldsymbol{\varepsilon}}

#+LaTeX_HEADER:\newcommand{\Z}{Z}
#+LaTeX_HEADER:\newcommand{\z}{z}
#+LaTeX_HEADER:\newcommand{\VZ}{\boldsymbol{Z}}
#+LaTeX_HEADER:\newcommand{\Vz}{\boldsymbol{z}}

